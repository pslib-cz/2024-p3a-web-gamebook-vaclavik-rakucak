// <auto-generated />
using System;
using Gamebook.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gamebook.Server.Migrations
{
    [DbContext(typeof(GamebookDbContext))]
    [Migration("20241214181139_repair")]
    partial class repair
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Gamebook.Server.Models.Dungeon", b =>
                {
                    b.Property<int>("IdDungeon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DmgCondition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRooms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Reward")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDungeon");

                    b.HasIndex("IdImage");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Hall", b =>
                {
                    b.Property<int>("IdHall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("IdHall");

                    b.HasIndex("IdImage");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Image", b =>
                {
                    b.Property<string>("IdImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("IdImage");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Item", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BasePrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseStat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdRoom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecEffect")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecEffectStat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("IdItem");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdRoom");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Monster", b =>
                {
                    b.Property<int>("IdMonster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hitpoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdRoom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("IdMonster");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdRoom")
                        .IsUnique();

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Gamebook.Server.Models.PlayerItem", b =>
                {
                    b.Property<int>("IdPlayerItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BasePrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseStat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecEffect")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpecEffectStat")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdPlayerItem");

                    b.HasIndex("IdImage");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Quest", b =>
                {
                    b.Property<int>("IdQuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDungeon")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestCondition")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestParametr")
                        .HasColumnType("TEXT");

                    b.HasKey("IdQuest");

                    b.HasIndex("IdDungeon");

                    b.HasIndex("IdImage");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.Property<int>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDungeon")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdHall")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("IdRoom");

                    b.HasIndex("IdDungeon");

                    b.HasIndex("IdHall")
                        .IsUnique();

                    b.HasIndex("IdImage");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.Property<int>("IdTown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTownId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdTown");

                    b.HasIndex("IdImage");

                    b.HasIndex("ParentTownId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Dungeon", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Hall", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Item", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Room", "Room")
                        .WithMany("Items")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Monster", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Room", "Room")
                        .WithOne("Monster")
                        .HasForeignKey("Gamebook.Server.Models.Monster", "IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Gamebook.Server.Models.PlayerItem", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Quest", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Dungeon", "Dungeon")
                        .WithMany("Quests")
                        .HasForeignKey("IdDungeon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dungeon");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Dungeon", "Dungeon")
                        .WithMany("Rooms")
                        .HasForeignKey("IdDungeon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Hall", "Hall")
                        .WithOne("Room")
                        .HasForeignKey("Gamebook.Server.Models.Room", "IdHall");

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage");

                    b.Navigation("Dungeon");

                    b.Navigation("Hall");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Town", "ParentTown")
                        .WithMany("ChildTowns")
                        .HasForeignKey("ParentTownId");

                    b.Navigation("Image");

                    b.Navigation("ParentTown");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Dungeon", b =>
                {
                    b.Navigation("Quests");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Hall", b =>
                {
                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.Navigation("ChildTowns");
                });
#pragma warning restore 612, 618
        }
    }
}
