// <auto-generated />
using System;
using Gamebook.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gamebook.Server.Migrations
{
    [DbContext(typeof(GamebookDbContext))]
    partial class GamebookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Dungeon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DmgCondition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RewardMoney")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Dmg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpecialEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SpecialEffectId");

                    b.ToTable("Equipments");

                    b.HasDiscriminator().HasValue("Equipment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gamebook.Server.Models.Fork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DungeonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Forks");
                });

            modelBuilder.Entity("Gamebook.Server.Models.ForkConnection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForkId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeadEnd")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ForkId");

                    b.ToTable("ForkConnections");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DungeonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hitpoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Npc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DungeonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NpcId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RewardItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoomItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MonsterId");

                    b.HasIndex("NpcId");

                    b.HasIndex("RewardItemId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DungeonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDeadEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KeyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PositionY")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoomItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("KeyId");

                    b.HasIndex("MonsterId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Gamebook.Server.Models.RoomItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("damage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("RoomItems");
                });

            modelBuilder.Entity("Gamebook.Server.Models.SpecialEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SpecialEffects");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTownId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentTownId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Key", b =>
                {
                    b.HasBaseType("Gamebook.Server.Models.Equipment");

                    b.Property<int>("DungeonId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DungeonId");

                    b.HasDiscriminator().HasValue("Key");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Dungeon", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Equipment", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.SpecialEffect", "SpecialEffect")
                        .WithMany()
                        .HasForeignKey("SpecialEffectId");

                    b.Navigation("Image");

                    b.Navigation("SpecialEffect");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Fork", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.ForkConnection", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Fork", "Fork")
                        .WithMany("Connections")
                        .HasForeignKey("ForkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Room", "ConnectedRoom")
                        .WithOne()
                        .HasForeignKey("Gamebook.Server.Models.ForkConnection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedRoom");

                    b.Navigation("Fork");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Hall", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Dungeon", "Dungeon")
                        .WithMany()
                        .HasForeignKey("DungeonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Gamebook.Server.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dungeon");

                    b.Navigation("Image");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Monster", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Quest", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Dungeon", "Dungeon")
                        .WithMany()
                        .HasForeignKey("DungeonId");

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.RoomItem", "RoomItem")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Gamebook.Server.Models.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId");

                    b.HasOne("Gamebook.Server.Models.Npc", "Npc")
                        .WithMany()
                        .HasForeignKey("NpcId");

                    b.HasOne("Gamebook.Server.Models.Equipment", "RewardItem")
                        .WithMany()
                        .HasForeignKey("RewardItemId");

                    b.Navigation("Dungeon");

                    b.Navigation("Image");

                    b.Navigation("Monster");

                    b.Navigation("Npc");

                    b.Navigation("RewardItem");

                    b.Navigation("RoomItem");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Gamebook.Server.Models.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId");

                    b.HasOne("Gamebook.Server.Models.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId");

                    b.Navigation("Image");

                    b.Navigation("Key");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("Gamebook.Server.Models.RoomItem", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Room", "Room")
                        .WithOne("RoomItem")
                        .HasForeignKey("Gamebook.Server.Models.RoomItem", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Image");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Town", "ParentTown")
                        .WithMany("ChildTowns")
                        .HasForeignKey("ParentTownId");

                    b.Navigation("Image");

                    b.Navigation("ParentTown");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Key", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Dungeon", "Dungeon")
                        .WithMany()
                        .HasForeignKey("DungeonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dungeon");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Fork", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Room", b =>
                {
                    b.Navigation("RoomItem");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Town", b =>
                {
                    b.Navigation("ChildTowns");
                });
#pragma warning restore 612, 618
        }
    }
}
